// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RicartAgrawala_RequestAcces_FullMethodName = "/proto.RicartAgrawala/RequestAcces"
	RicartAgrawala_RespondAcces_FullMethodName = "/proto.RicartAgrawala/RespondAcces"
)

// RicartAgrawalaClient is the client API for RicartAgrawala service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RicartAgrawalaClient interface {
	RequestAcces(ctx context.Context, in *ReqMes, opts ...grpc.CallOption) (*Ack, error)
	RespondAcces(ctx context.Context, in *ReqMes, opts ...grpc.CallOption) (*Ack, error)
}

type ricartAgrawalaClient struct {
	cc grpc.ClientConnInterface
}

func NewRicartAgrawalaClient(cc grpc.ClientConnInterface) RicartAgrawalaClient {
	return &ricartAgrawalaClient{cc}
}

func (c *ricartAgrawalaClient) RequestAcces(ctx context.Context, in *ReqMes, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, RicartAgrawala_RequestAcces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricartAgrawalaClient) RespondAcces(ctx context.Context, in *ReqMes, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, RicartAgrawala_RespondAcces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RicartAgrawalaServer is the server API for RicartAgrawala service.
// All implementations must embed UnimplementedRicartAgrawalaServer
// for forward compatibility
type RicartAgrawalaServer interface {
	RequestAcces(context.Context, *ReqMes) (*Ack, error)
	RespondAcces(context.Context, *ReqMes) (*Ack, error)
	mustEmbedUnimplementedRicartAgrawalaServer()
}

// UnimplementedRicartAgrawalaServer must be embedded to have forward compatible implementations.
type UnimplementedRicartAgrawalaServer struct {
}

func (UnimplementedRicartAgrawalaServer) RequestAcces(context.Context, *ReqMes) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAcces not implemented")
}
func (UnimplementedRicartAgrawalaServer) RespondAcces(context.Context, *ReqMes) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondAcces not implemented")
}
func (UnimplementedRicartAgrawalaServer) mustEmbedUnimplementedRicartAgrawalaServer() {}

// UnsafeRicartAgrawalaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RicartAgrawalaServer will
// result in compilation errors.
type UnsafeRicartAgrawalaServer interface {
	mustEmbedUnimplementedRicartAgrawalaServer()
}

func RegisterRicartAgrawalaServer(s grpc.ServiceRegistrar, srv RicartAgrawalaServer) {
	s.RegisterService(&RicartAgrawala_ServiceDesc, srv)
}

func _RicartAgrawala_RequestAcces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicartAgrawalaServer).RequestAcces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RicartAgrawala_RequestAcces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicartAgrawalaServer).RequestAcces(ctx, req.(*ReqMes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicartAgrawala_RespondAcces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicartAgrawalaServer).RespondAcces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RicartAgrawala_RespondAcces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicartAgrawalaServer).RespondAcces(ctx, req.(*ReqMes))
	}
	return interceptor(ctx, in, info, handler)
}

// RicartAgrawala_ServiceDesc is the grpc.ServiceDesc for RicartAgrawala service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RicartAgrawala_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RicartAgrawala",
	HandlerType: (*RicartAgrawalaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAcces",
			Handler:    _RicartAgrawala_RequestAcces_Handler,
		},
		{
			MethodName: "RespondAcces",
			Handler:    _RicartAgrawala_RespondAcces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template.proto",
}
